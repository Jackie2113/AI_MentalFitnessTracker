# -*- coding: utf-8 -*-
"""MentalFitnessTracker_Jacob.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15m-zbvc7yieQq-ZEqw_R9zKe7lGIEfPk

# Importing necessary libraries
"""

import numpy as np
import pandas as pd
import warnings
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

warnings.filterwarnings('ignore')

from google.colab import drive
drive.mount('/content/drive')

"""# Data"""

df1 = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/prevalence-by-mental-and-substance-use-disorder _AI.csv")
df2 = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/mental-and-substance-use-as-share-of-disease -AI.csv")

df1

df2

data = pd.merge(df1,df2)
data

"""# Data Cleaning"""

data.isnull().sum()

data.drop('Code', axis=1, inplace=True)     #index = 1 or 'columns'

data

data.shape, data.size

data.set_axis(['Country', 'Year', 'Schizophrenia', 'BipolarDisorder', 'EatingDisorder', 'Anxiety', 'DrugUsage','Depression', 'Alcohol', 'MentalFitness'], axis='columns', inplace=True)

data

"""# Visualization"""

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(), annot=True, cmap='Blues')
plt.plot

sns.pairplot(data, corner=True)
plt.show()

mean = data['MentalFitness'].mean()
mean

fig = px.pie(data, values='MentalFitness', names='Year')
fig.show()

fig = px.line(data, x='Year', y='MentalFitness', color='Country', markers=True)
fig.show()

fig=px.bar(data.head(30),x='Year',y='MentalFitness',color='MentalFitness',template='ggplot2')
fig.show()

fig = px.bar(data, x='Country', y='BipolarDisorder', color='Year', barmode='group', template='plotly_dark')
fig.update_layout(xaxis={'categoryorder':'total descending'})
fig.show()

fig = px.box(data, x='Year', y='EatingDisorder', color='Country', template='plotly_dark')
fig.show()

fig = px.histogram(data, x='Anxiety', color='Country', marginal='box', template='plotly_dark')
fig.show()

fig = px.scatter(data, x='Year', y='Depression', size='MentalFitness', color='Country', template='plotly_dark')
fig.show()

"""# More Data Checking"""

data.info()

data.info

from sklearn.preprocessing import LabelEncoder
l=LabelEncoder()
for i in data.columns:
  if data[i].dtype == 'object':
    data[i]=l.fit_transform(data[i])

data.shape

"""# Splitting Data(Training and Testing)"""

X=data.drop('MentalFitness', axis=1)
Y=data['MentalFitness']

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(X, Y, test_size=0.2, random_state=2)

xtrain.shape, xtest.shape, ytrain.shape, ytest.shape

"""# Linear Regression Model"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr=LinearRegression()
lr.fit(xtrain, ytrain)

ytrain_pred_1 = lr.predict(xtrain)

mse_1 = mean_squared_error(ytrain, ytrain_pred_1)

rmse_1 = np.sqrt(mse_1)

r2_1 = r2_score(ytrain, ytrain_pred_1)

print(mse_1 ,'\n', rmse_1, '\n', r2_1)

"""# Random Forest Regressor Model"""

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain, ytrain)

ytrain_pred_2 = rf.predict(xtrain)

mse_2 = mean_squared_error(ytrain, ytrain_pred_2)

rmse_2 = np.sqrt(mse_2)

r2_2 = r2_score(ytrain, ytrain_pred_2)

print(mse_2 ,'\n', rmse_2, '\n', r2_2)

"""# Support Vector Regression Model"""

from sklearn import svm
model = svm.SVR(kernel='linear')

model.fit(xtrain, ytrain)

ypred = model.predict(xtest)

mse = mean_squared_error(ytest, ypred)
print("Mean Squared Error (MSE):", mse)

rmse = np.sqrt(mse)
print("Root Mean Squared Error (RMSE):", rmse)

r2 = r2_score(ytest, ypred)
print("R-squared score:", r2)

"""# Decision Tree Model"""

from sklearn.tree import DecisionTreeRegressor

dt_model = DecisionTreeRegressor()
dt_model.fit(xtrain, ytrain)
y_dt_pred = dt_model.predict(xtest)
print("Decision Tree Regression - R2 Score:", r2_score(ytest, y_dt_pred))
print("Decision Tree Regression - Mean Squared Error:", mean_squared_error(ytest, y_dt_pred))

"""# Lasso Regression Model"""

from sklearn.linear_model import Lasso

lasso_model = Lasso(alpha=0.1)
lasso_model.fit(xtrain, ytrain)
y_lasso_pred = lasso_model.predict(xtest)
print("Lasso Regression - R2 Score:", r2_score(ytest, y_lasso_pred))
print("Lasso Regression - Mean Squared Error:", mean_squared_error(ytest, y_lasso_pred))

"""# Ridge Regression Model"""

from sklearn.linear_model import Ridge

ridge_model = Ridge(alpha=0.1)
ridge_model.fit(xtrain, ytrain)
y_ridge_pred = ridge_model.predict(xtest)
print("Ridge Regression - R2 Score:", r2_score(ytest, y_ridge_pred))
print("Ridge Regression - Mean Squared Error:", mean_squared_error(ytest, y_ridge_pred))

"""# Polynomial Regression Model

> Expressing relationship between dependant and independant variable


> Different degrees(2, 3, 4) are showcased, with the score increasing with each degree

## Degree = 2
"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

poly_features = PolynomialFeatures(degree=2)
X_poly_train = poly_features.fit_transform(xtrain)
X_poly_test = poly_features.transform(xtest)

poly_model = LinearRegression()
poly_model.fit(X_poly_train, ytrain)
y_poly_pred = poly_model.predict(X_poly_test)
print("Polynomial Regression - R2 Score:", r2_score(ytest, y_poly_pred))
print("Polynomial Regression - Mean Squared Error:", mean_squared_error(ytest, y_poly_pred))

"""## Degree = 3"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

poly_features = PolynomialFeatures(degree=3)
X_poly_train = poly_features.fit_transform(xtrain)
X_poly_test = poly_features.transform(xtest)

poly_model = LinearRegression()
poly_model.fit(X_poly_train, ytrain)
y_poly_pred = poly_model.predict(X_poly_test)
print("Polynomial Regression - R2 Score:", r2_score(ytest, y_poly_pred))
print("Polynomial Regression - Mean Squared Error:", mean_squared_error(ytest, y_poly_pred))

"""## Degree = 4"""

from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

poly_features = PolynomialFeatures(degree=4)
X_poly_train = poly_features.fit_transform(xtrain)
X_poly_test = poly_features.transform(xtest)

poly_model = LinearRegression()
poly_model.fit(X_poly_train, ytrain)
y_poly_pred = poly_model.predict(X_poly_test)
print("Polynomial Regression - R2 Score:", r2_score(ytest, y_poly_pred))
print("Polynomial Regression - Mean Squared Error:", mean_squared_error(ytest, y_poly_pred))

"""# Comparing Models"""

lr_scores = lr.score(xtest, ytest)

rf_scores = rf.score(xtest, ytest)

svr_scores = model.score(xtest, ytest)

dt_scores = dt_model.score(xtest,ytest)

l_scores = lasso_model.score(xtest,ytest)

r_scores = ridge_model.score(xtest,ytest)

# p_scores = poly_model.score(xtest,ytest)

print("Linear Regression Score: {:.2f}".format(lr_scores))
print("Random Forest Regressor Score: {:.2f}".format(rf_scores))
print("Support Vector Regressor Score: {:.2f}".format(svr_scores))
print("Decision Tree Regressor Score: {:.2f}".format(dt_scores))
print("Lasso Regressor Score: {:.2f}".format(l_scores))
print("Ridge Regressor Score: {:.2f}".format(r_scores))
# print("Polynomial Regressor Score: {:.2f}".format(p_scores))